// Generated by Xata Codegen 0.23.5. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "projects",
    columns: [
      { name: "name", type: "string" },
      { name: "apiKey", type: "string" },
      { name: "nameSlug", type: "string" },
      { name: "userId", type: "string" },
      { name: "codesheetsId", type: "string" },
    ],
    revLinks: [{ column: "project", table: "runs" }],
  },
  {
    name: "runs",
    columns: [
      { name: "userId", type: "string" },
      { name: "project", type: "link", link: { table: "projects" } },
      { name: "wordCount", type: "int" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Projects = InferredTypes["projects"];
export type ProjectsRecord = Projects & XataRecord;

export type Runs = InferredTypes["runs"];
export type RunsRecord = Runs & XataRecord;

export type DatabaseSchema = {
  projects: ProjectsRecord;
  runs: RunsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: process.env.XATA_DB_URL,
}


export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
